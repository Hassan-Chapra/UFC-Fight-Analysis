# UFC Fight Predictor - Core Code

# src/preprocess.py
import pandas as pd

def compute_striking_efficiency(slpM, sapM):
    return (slpM - sapM) / slpM if slpM != 0 else 0

def compute_takedown_efficiency(takedowns_per_fight, accuracy):
    return takedowns_per_fight * accuracy / 100

def preprocess_fighter_stats(df):
    df['StrikingEfficiency'] = df.apply(lambda row: compute_striking_efficiency(row['SLpM'], row['SApM']), axis=1)
    df['TakedownEfficiency'] = df.apply(lambda row: compute_takedown_efficiency(row['TakedownAttempts'], row['TakedownAccuracy']), axis=1)
    return df

# src/model.py
from sklearn.ensemble import RandomForestClassifier
import pandas as pd
import joblib

def train_model(X, y):
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X, y)
    joblib.dump(model, 'model/ufc_model.pkl')
    return model

# src/predict.py
import joblib
import numpy as np

def predict_fight(fighter_A, fighter_B):
    model = joblib.load('model/ufc_model.pkl')

    def features(f):
        strike_eff = (f['SLpM'] - f['SApM']) / f['SLpM'] if f['SLpM'] != 0 else 0
        td_eff = f['TakedownAttempts'] * f['TakedownAccuracy'] / 100
        return [
            f['SLpM'], f['SApM'], f['StrikingAccuracy'], f['StrikingDefense'],
            f['TakedownAccuracy'], f['TakedownDefense'], f['SubAttempts'],
            f['FightTime'], f['Age'], strike_eff, td_eff
        ]

    X = [np.array(features(fighter_A)) - np.array(features(fighter_B))]
    prob = model.predict_proba(X)[0]
    winner = 'Fighter A' if prob[1] > 0.5 else 'Fighter B'
    method = 'Decision' if prob[1] < 0.7 else 'KO/Sub'

    return {
        'Winner': winner,
        'Win Probability': f"{max(prob) * 100:.1f}%",
        'Victory Method': method
    }

# app/app.py
import streamlit as st
from src.predict import predict_fight

st.title("🥋 UFC Fight Predictor")

st.markdown("Enter stats for each fighter and see who wins!")

with st.form("fighter_form"):
    col1, col2 = st.columns(2)
    
    with col1:
        st.header("Fighter A")
        a = {
            'SLpM': st.number_input("SLpM", value=5.0),
            'SApM': st.number_input("SApM", value=3.0),
            'StrikingAccuracy': st.slider("Striking Accuracy (%)", 0, 100, 50),
            'StrikingDefense': st.slider("Striking Defense (%)", 0, 100, 60),
            'TakedownAccuracy': st.slider("Takedown Accuracy (%)", 0, 100, 40),
            'TakedownDefense': st.slider("Takedown Defense (%)", 0, 100, 75),
            'TakedownAttempts': st.number_input("Takedown Attempts/Fight", value=2.0),
            'SubAttempts': st.number_input("Submission Attempts/Fight", value=0.5),
            'FightTime': st.number_input("Avg Fight Time (min)", value=12.0),
            'Age': st.number_input("Age", value=29)
        }

    with col2:
        st.header("Fighter B")
        b = {
            'SLpM': st.number_input("SLpM ", key='b_slpm', value=4.0),
            'SApM': st.number_input("SApM ", key='b_sapm', value=4.0),
            'StrikingAccuracy': st.slider("Striking Accuracy (%) ", 0, 100, 48, key='b_sa'),
            'StrikingDefense': st.slider("Striking Defense (%) ", 0, 100, 57, key='b_sd'),
            'TakedownAccuracy': st.slider("Takedown Accuracy (%) ", 0, 100, 30, key='b_tdacc'),
            'TakedownDefense': st.slider("Takedown Defense (%) ", 0, 100, 80, key='b_tddef'),
            'TakedownAttempts': st.number_input("Takedown Attempts/Fight ", value=1.5, key='b_tda'),
            'SubAttempts': st.number_input("Submission Attempts/Fight ", value=0.4, key='b_sub'),
            'FightTime': st.number_input("Avg Fight Time (min) ", value=10.5, key='b_time'),
            'Age': st.number_input("Age ", value=32, key='b_age')
        }

    submitted = st.form_submit_button("Predict Fight")
    if submitted:
        result = predict_fight(a, b)
        st.subheader(f"🏆 Predicted Winner: {result['Winner']}")
        st.text(f"Win Probability: {result['Win Probability']}")
        st.text(f"Victory Method: {result['Victory Method']}")
